// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "RegionGrowingGUI.h"
#include "cipChestConventions.h"

RegionGrowingGUI::RegionGrowingGUI() {
  { regionGrowingWindow = new Fl_Double_Window(384, 208, "Region Growing");
    regionGrowingWindow->box(FL_UP_BOX);
    regionGrowingWindow->user_data((void*)(this));
    { thresholdsGroup = new Fl_Group(15, 25, 355, 38);
      thresholdsGroup->box(FL_ENGRAVED_FRAME);
      thresholdsGroup->labeltype(FL_ENGRAVED_LABEL);
      { minThresholdInput = new Fl_Value_Input(118, 34, 46, 20, "Min Threshold");
        minThresholdInput->value(-1024);
      } // Fl_Value_Input* minThresholdInput
      { maxThresholdInput = new Fl_Value_Input(312, 34, 46, 20, "Max Threshold");
        maxThresholdInput->value(1024);
      } // Fl_Value_Input* maxThresholdInput
      thresholdsGroup->end();
    } // Fl_Group* thresholdsGroup
    { Fl_Choice* o = chestRegionChoice = new Fl_Choice(103, 118, 269, 28, "Chest Region");
      chestRegionChoice->down_box(FL_BORDER_BOX);
      o->add("Undefined Region", 0, (Fl_Callback*)undefinedRegionMenuItem_CB, (void*)(this));
      o->add("Whole Lung", 0, (Fl_Callback*)wholeLungMenuItem_CB, (void*)(this));
    } // Fl_Choice* chestRegionChoice
    { Fl_Choice* o = chestTypeChoice = new Fl_Choice(103, 155, 269, 28, "Chest Type");
      chestTypeChoice->down_box(FL_BORDER_BOX);
      o->add("Airway", 0, (Fl_Callback*)airwayMenuItem_CB, (void*)(this));
    } // Fl_Choice* chestTypeChoice
    { roiRadiusSpinner = new Fl_Spinner(256, 76, 40, 25, "Region of Interest Radius");
      roiRadiusSpinner->maximum( 255 );
    } // Fl_Spinner* roiRadiusSpinner
    regionGrowingWindow->end();
  } // Fl_Double_Window* regionGrowingWindow
  this->m_ChestRegion = static_cast< unsigned char >( cip::UNDEFINEDREGION );
  this->m_ChestType = static_cast< unsigned char >( cip::UNDEFINEDTYPE );
}

unsigned char RegionGrowingGUI::GetChestRegion() {
  return this->m_ChestRegion;
}

unsigned char RegionGrowingGUI::GetChestType() {
  return this->m_ChestType;
}

unsigned int RegionGrowingGUI::GetROIRadius() {
  unsigned int radius = this->roiRadiusSpinner->value() - 1;
  
  return radius;
}

short RegionGrowingGUI::GetMinThreshold() {
  return static_cast< short >( this->minThresholdInput->value() );
}

short RegionGrowingGUI::GetMaxThreshold() {
  return static_cast< short >( this->maxThresholdInput->value() );
}

void RegionGrowingGUI::wholeLungMenuItem_CB( Fl_Widget* o, void* v ) {
  ((RegionGrowingGUI*)v)->wholeLungMenuItem_CB_i();
}

void RegionGrowingGUI::wholeLungMenuItem_CB_i() {
  this->m_ChestRegion = (unsigned char)( cip::WHOLELUNG );
}

void RegionGrowingGUI::undefinedRegionMenuItem_CB( Fl_Widget* o, void* v ) {
  ((RegionGrowingGUI*)v)->undefinedRegionMenuItem_CB_i();
}

void RegionGrowingGUI::undefinedRegionMenuItem_CB_i() {
  this->m_ChestRegion = (unsigned char)( cip::UNDEFINEDREGION );
}

void RegionGrowingGUI::airwayMenuItem_CB( Fl_Widget* o, void* v ) {
  ((RegionGrowingGUI*)v)->airwayMenuItem_CB_i();
}

void RegionGrowingGUI::airwayMenuItem_CB_i() {
  this->m_ChestType = (unsigned char)( cip::AIRWAY );
}
