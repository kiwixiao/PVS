# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cxx}
decl {\#include "cipConventions.h"} {} 

decl {\#include "itkImageRegionIteratorWithIndex.h"} {} 

decl {\#include "itkImage.h"} {public
} 

decl {\#include <iostream>} {} 

decl {\#include <vector>} {public
} 

decl {using namespace std;} {public
} 

class PaintBrushAndEraserGUI {open
} {
  decl {typedef itk::Image< unsigned short, 3 > LabelMapType;} {public
  }
  Function {PaintBrushAndEraserGUI()} {open
  } {
    Fl_Window paintBrushAndEraserWindow {
      label {Paint Brush & Eraser} open
      xywh {1333 46 380 255} type Double box UP_BOX visible
    } {
      Fl_Group {} {
        label {Tool Type}
        xywh {13 28 357 47} box ENGRAVED_FRAME align 5
      } {
        Fl_Round_Button paintBrushRadio {
          label {Paint Brush}
          user_data this
          callback paintBrushRadio_CB
          xywh {19 28 115 42} type Radio down_box ROUND_DOWN_BOX
          code0 {paintBrushRadio->value(1);}
        }
        Fl_Round_Button eraserRadio {
          label Eraser
          user_data this
          callback eraserRadio_CB
          xywh {156 33 68 32} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Spinner toolSizeSpinner {
          label {Tool Size}
          xywh {315 38 40 25}
          code0 {toolSizeSpinner->maximum( 99 );}
        }
      }
      Fl_Group eraserGroup {selected
        xywh {13 133 357 37} box ENGRAVED_BOX
      } {
        Fl_Button eraseButton {
          label Erase
          user_data this
          callback eraseButton_CB
          xywh {246 139 110 23}
          code0 {eraseButton->deactivate();}
        }
        Fl_Check_Button eraseSelectedCheck {
          label {Erase Selected}
          xywh {19 142 129 15} down_box DOWN_BOX
          code0 {eraseSelectedCheck->deactivate();}
        }
        Fl_Group {} {open
          xywh {30 150 340 20}
        } {}
      }
      Fl_Group toolThresholdsGroup {
        xywh {15 87 355 38} box ENGRAVED_FRAME labeltype ENGRAVED_LABEL
      } {
        Fl_Check_Button tool3DCheck {
          label {3D Tool}
          xywh {291 96 16 20} down_box DOWN_BOX
        }
        Fl_Value_Input minValueInput {
          label {Min Value}
          xywh {91 96 46 20} value -1024
        }
        Fl_Value_Input maxValueInput {
          label {Max Value}
          xywh {227 96 46 20} value 1024
        }
      }
      Fl_Choice chestRegionChoice {
        label {Chest Region} open
        xywh {103 177 269 28} down_box BORDER_BOX
        code0 {o->add("Left Lung", 0, (Fl_Callback*)leftLungMenuItem_CB, (void*)(this));}
        code1 {o->add("Right Lung", 0, (Fl_Callback*)rightLungMenuItem_CB, (void*)(this));}
        code2 {o->add("Right Upper Lobe", 0, (Fl_Callback*)rightUpperLobeMenuItem_CB, (void*)(this));}
        code3 {o->add("Right Middle Lobe", 0, (Fl_Callback*)rightMiddleLobeMenuItem_CB, (void*)(this));}
      } {}
      Fl_Choice chestTypeChoice {
        label {Chest Type} open
        xywh {103 214 269 28} down_box BORDER_BOX
        code0 {o->add("Normal Parenchyma", 0, (Fl_Callback*)normalParenchymaMenuItem_CB, (void*)(this));}
        code1 {o->add("Airway Generation 3", 0, (Fl_Callback*)airwayGeneration3MenuItem_CB, (void*)(this));}
        code2 {o->add("Airway Generation 4", 0, (Fl_Callback*)airwayGeneration4MenuItem_CB, (void*)(this));}
        code3 {o->add("Airway Generation 5", 0, (Fl_Callback*)airwayGeneration5MenuItem_CB, (void*)(this));}
      } {}
    }
    code {this->m_PaletteSelection =  static_cast< unsigned char >( OBLIQUEFISSURE );} {}
    code {this->m_LabelMapImage = LabelMapType::New();} {}
    code {this->m_ChestRegion = static_cast< unsigned char >( cip::UNDEFINEDREGION );} {}
    code {this->m_ChestType = static_cast< unsigned char >( cip::UNDEFINEDTYPE );} {}
  }
  Function {paintBrushRadio_CB( Fl_Widget* o, void* v )} {private return_type {static void}
  } {
    code {((PaintBrushAndEraserGUI*)v)->paintBrushRadio_CB_i();} {}
  }
  Function {paintBrushRadio_CB_i()} {private return_type void
  } {
    code {this->eraseButton->deactivate();
this->eraseSelectedCheck->deactivate();} {}
  }
  Function {eraserRadio_CB( Fl_Widget* o, void* v )} {private return_type {static void}
  } {
    code {((PaintBrushAndEraserGUI*)v)->eraserRadio_CB_i();} {}
  }
  Function {eraserRadio_CB_i()} {private return_type void
  } {
    code {this->eraseSelectedCheck->activate();
this->eraseButton->activate();} {}
  }
  Function {eraseButton_CB( Fl_Widget* o, void* v )} {private return_type {static void}
  } {
    code {((PaintBrushAndEraserGUI*)v)->eraseButton_CB_i();} {}
  }
  Function {eraseButton_CB_i()} {private return_type void
  } {
    code {unsigned char paletteSelection = this->GetPaletteSelection();

ChestConventions conventions;

typedef itk::ImageRegionIteratorWithIndex< LabelMapType >  LabelMapIteratorType;

LabelMapIteratorType lIt( this->m_LabelMapImage, this->m_LabelMapImage->GetBufferedRegion() );

lIt.GoToBegin();
while ( !lIt.IsAtEnd() )
{
  if ( lIt.Get() > 255 )
  {
    unsigned short currentLabel  = lIt.Get();
    unsigned char  currentRegion = conventions.GetChestRegionFromValue( currentLabel );
    unsigned char  currentType   = conventions.GetChestTypeFromValue( currentLabel );
  
    if ( this->eraseSelectedCheck->value() )
    {
      if ( currentType == paletteSelection || paletteSelection == static_cast< unsigned char >( UNDEFINEDTYPE ) )
      {
        unsigned short newLabel = conventions.GetValueFromChestRegionAndType( currentRegion, UNDEFINEDTYPE );
      
        lIt.Set( newLabel );
      }
    } 
    else
    {
    unsigned short newLabel = conventions.GetValueFromChestRegionAndType( currentRegion, UNDEFINEDTYPE );

  
    lIt.Set( newLabel );
    }
  }
	
  ++lIt;	
}

if ( this->eraseSelectedCheck->value() )
{
  (*this->m_TypeIndices)[paletteSelection].clear();
}
else
{
  for ( int i=0; i<256; i++ )
    { 
      (*this->m_TypeIndices)[i].clear();
    }
}

this->m_UpdateViewerFunction();} {}
  }
  Function {GetPaletteSelection()} {return_type {unsigned char}
  } {
    code {return this->m_PaletteSelection;} {}
  }
  Function {GetChestRegion()} {return_type {unsigned char}
  } {
    code {return this->m_ChestRegion;} {}
  }
  Function {GetToolRadius()} {return_type {unsigned int}
  } {
    code {unsigned int radius = this->toolSizeSpinner->value() - 1;

return radius;} {}
  }
  Function {GetPaintBrushSelected()} {return_type bool
  } {
    code {return static_cast< bool >( this->paintBrushRadio->value() );} {}
  }
  Function {GetEraserSelected()} {return_type bool
  } {
    code {return static_cast< bool >( this->eraserRadio->value() );} {}
  }
  Function {GetEraseSelectedSelected()} {return_type bool
  } {
    code {return static_cast< bool >( this->eraseSelectedCheck->value() );} {}
  }
  Function {SetLabelMapImage( LabelMapType::Pointer labelMapImage )} {return_type void
  } {
    code {this->m_LabelMapImage = labelMapImage;} {}
  }
  Function {SetUpdateViewerFunction( void (*f)() )} {return_type void
  } {
    code {this->m_UpdateViewerFunction = f;} {}
  }
  Function {SetTypeIndices( std::vector< std::vector< LabelMapType::IndexType > >* indices )} {return_type void
  } {
    code {this->m_TypeIndices = indices;} {}
  }
  decl {LabelMapType::Pointer m_LabelMapImage;} {}
  decl {void (*m_UpdateViewerFunction)();} {}
  decl {unsigned char m_PaletteSelection;} {}
  decl {unsigned char m_ChestRegion;} {}
  decl {unsigned char m_ChestType;} {}
  decl {std::vector< std::vector< LabelMapType::IndexType > >* m_TypeIndices;} {}
  Function {generationSpinner_CB( Fl_Widget* o, void* v )} {private return_type {static void}
  } {
    code {((PaintBrushAndEraserGUI*)v)->generationSpinner_CB_i();} {}
  }
  Function {generationSpinner_CB_i()} {private return_type void
  } {
    code {if ( this->specifyGenerationCheck->value() )
 {
   if ( this->generationSpinner->value() == 0 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION0 );
      std::cout << "AIRWAYGENERATION0" << std::endl;
    }
   if ( this->generationSpinner->value() == 1 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION1 );
      std::cout << "AIRWAYGENERATION1" << std::endl;
    }
   if ( this->generationSpinner->value() == 2 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION2 );
      std::cout << "AIRWAYGENERATION2" << std::endl;
    }
   if ( this->generationSpinner->value() == 3 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION3 );
      std::cout << "AIRWAYGENERATION3" << std::endl;
    }
   if ( this->generationSpinner->value() == 4 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION4 );
      std::cout << "AIRWAYGENERATION4" << std::endl;
    }
   if ( this->generationSpinner->value() == 5 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION5 );
      std::cout << "AIRWAYGENERATION5" << std::endl;
    }
   if ( this->generationSpinner->value() == 6 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION6 );
      std::cout << "AIRWAYGENERATION6" << std::endl;
    }
   if ( this->generationSpinner->value() == 7 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION7 );      
      std::cout << "AIRWAYGENERATION7" << std::endl;
    }
   if ( this->generationSpinner->value() == 8 )
    {
      this->m_PaletteSelection = static_cast< unsigned char >( AIRWAYGENERATION8 );
      std::cout << "AIRWAYGENERATION8" << std::endl;
    }
 }} {}
  }
  Function {GetToolLowerThreshold()} {return_type short
  } {
    code {return static_cast< short >( this->minValueInput->value() );} {}
  }
  Function {GetToolUpperThreshold()} {return_type short
  } {
    code {return static_cast< short >( this->maxValueInput->value() );} {}
  }
  Function {rightLungMenuItem_CB( Fl_Widget* o, void* v )} {private return_type {static void}
  } {
    code {((PaintBrushAndEraserGUI*)v)->rightLungMenuItem_CB_i();} {}
  }
  Function {rightLungMenuItem_CB_i()} {private return_type void
  } {
    code {this->m_ChestRegion = static_cast< unsigned char >( cip::RIGHTLUNG );} {}
  }
  Function {leftLungMenuItem_CB( Fl_Widget* o, void* v )} {private return_type {static void}
  } {
    code {((PaintBrushAndEraserGUI*)v)->leftLungMenuItem_CB_i();} {}
  }
  Function {leftLungMenuItem_CB_i()} {private return_type void
  } {
    code {this->m_ChestRegion = static_cast< unsigned char >( cip::LEFTLUNG );} {}
  }
} 
