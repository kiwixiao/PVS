# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
decl {\#include "cipConventions.h"} {private local
} 

decl {\#include <string>} {public global
} 

decl {\#include <FL/Fl_Text_Buffer.H>} {public global
} 

decl {\#include <sstream>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <stdio.h>} {public global
} 

decl {using namespace std;} {public local
} 

class PaletteCounterGUI {open
} {
  Function {PaletteCounterGUI()} {open
  } {
    code {this->m_ChestRegion = " ";
this->m_ChestType = " ";
this->m_ChestRegionBuffer = new Fl_Text_Buffer();
this->m_ChestTypeBuffer = new Fl_Text_Buffer();
this->m_CountBuffer = new Fl_Text_Buffer();} {}
    Fl_Window paletteCounterWindow {
      label {Palette Counter} open selected
      xywh {801 145 542 112} type Double box UP_BOX visible
    } {
      Fl_Text_Display chestRegionField {
        label {Selected Chest Region}
        xywh {163 11 367 25} align 260
      }
      Fl_Text_Display chestTypeField {
        label {Selected Chest Type}
        xywh {164 44 366 26} align 260
      }
      Fl_Text_Display countField {
        label {Number Selected Points}
        xywh {164 75 366 25} align 260
      }
    }
  }
  decl {std::string m_ChestRegion;} {private local
  }
  decl {std::string m_ChestType;} {private local
  }
  decl {Fl_Text_Buffer* m_ChestTypeBuffer;} {private local
  }
  decl {Fl_Text_Buffer* m_ChestRegionBuffer;} {private local
  }
  decl {Fl_Text_Buffer* m_CountBuffer;} {private local
  }
  Function {SetChestRegion(std::string cipRegion)} {open return_type void
  } {
    code {this->m_ChestRegionBuffer->text(cipRegion.c_str());
this->chestRegionField->buffer(this->m_ChestRegionBuffer);} {}
  }
  Function {SetChestType(std::string cipType)} {open return_type void
  } {
    code {this->m_ChestTypeBuffer->text(cipType.c_str());
this->chestTypeField->buffer(this->m_ChestTypeBuffer);} {}
  }
  Function {SetCount(unsigned int count)} {open return_type void
  } {
    code {std::stringstream stream;
stream << count;

this->m_CountBuffer->text( stream.str().c_str() );
this->countField->buffer(this->m_CountBuffer);} {}
  }
} 
